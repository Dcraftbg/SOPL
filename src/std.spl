const versionl = 1_010_01_l; // May not always be up to date!
macro pop32  
    RSP 4 -
end

macro pop64
    RSP 8 -
end

macro pop-ptr
    cif IS_32_BIT {
        pop32
    }
    celse {
        pop64
    }
end
cif SHOULD_USE_LIBC {
    include "C/stdio.spl"
    include "C/stdlib.spl"
    macro STD_PUT_STRING 
        pop64
        puts
        pop-ptr
    end
    macro STD_PUT_U32
        "%d"c printf pop-ptr
    end
    macro STD_EXIT
        1 exit TCEXIT_PROGRAM
    end
}
celse {
    cif TARGET_PLATFORM_LINUX {
        include "Linux/syscalls.spl"
        macro STD_PUT_STRING 
            RAX = SYS_write
            RSI 0
            RDX pop
            RDI pop
            interrupt I_SYSCALL
        end
        macro STD_PUT_U32
            "TODO: STD_PUT_U32 Is not yet implemented for linux machines" STD_PUT_STRING
            RAX = SYS_exit
            RSI 1
            interrupt I_SYSCALL
            //"%d"c printf pop-ptr
        end
        macro STD_EXIT
            RAX = SYS_exit
            RSI 1
            interrupt I_SYSCALL
            TCEXIT_PROGRAM
        end
    }
}
macro TODO {
    __FILE__ push STD_PUT_STRING
    ":"      push STD_PUT_STRING
    __LINE__ push STD_PUT_U32
    ":"      push STD_PUT_STRING
    __CHAR__ push STD_PUT_U32
    ":"      push STD_PUT_STRING
    PUT_STRING
    1 exit
    TCEXIT_PROGRAM
}


func deref64(p: ptr : any64) {
    * p RAX
    ret RAX
}
func deref32(p: ptr : any32) {
    * p EAX
    EAX push
}

func deref16(p: ptr : any16) {
    * p AX
    AX push
}
func deref8(p: ptr : any8)  {
    * RAX AL
    AL push
}
type size_t = const_expr: cif IS_32_BIT {int} celse {long};
macro true  1 as bool end
macro false 0 as bool end

func print_num(num: int) {
    cif SHOULD_USE_LIBC {
        extern "C" printf
        num push "%d"c printf pop-ptr
    }
    celse {
        "ERROR: Not implemented"c TODO
    }
}